{"version":3,"sources":["Components/SortingVisualizer.js","Components/SortingAlgos.js","App.js","reportWebVitals.js","index.js"],"names":["SortingVisualizer","props","bubbleSort","animations","array","i","length","j","push","sortingAlgos","arr","console","log","comparison","setTimeout","arrBars","document","getElementsByClassName","height1","offsetHeight","height2","classList","toggle","style","height","className","onClick","generateArr","tmpHeight","minHeight","swapPos","id","map","num","index","App","useState","numArr","setNumArr","useEffect","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wNA8FeA,MAzFf,SAA2BC,GAIvB,IAgBMC,EAAa,WACf,IAAMC,ECfP,SAAoBC,GAEvB,IADA,IAAMD,EAAa,GACXE,EAAE,EAAGA,EAAED,EAAME,OAAQD,IACzB,IAAI,IAAIE,EAAE,EAAGA,EAAEH,EAAME,OAAOD,EAAE,EAAGE,IAC7BJ,EAAWK,KAAK,CAACD,EAAGA,EAAE,IAG9B,OAAOJ,EDQgBM,CAAwBR,EAAMS,KACjDC,QAAQC,IAAIT,GACZ,IAHqB,eAGbE,GACJ,IAAMQ,EAAaV,EAAWE,GAC9BS,YAAW,WACP,IAAMC,EAAUC,SAASC,uBAAuB,aAC1CC,EAAUH,EAAQF,EAAW,IAAIM,aACjCC,EAAUL,EAAQF,EAAW,IAAIM,aAEvCJ,EAAQF,EAAW,IAAIQ,UAAUC,OAAO,YACxCP,EAAQF,EAAW,IAAIQ,UAAUC,OAAO,YAErCJ,EAAUE,IACTL,EAAQF,EAAW,IAAIU,MAAMC,OAA7B,UAAyCN,EAAzC,MACAH,EAAQF,EAAW,IAAIU,MAAMC,OAA7B,UAAyCJ,EAAzC,OAEJN,YAAW,WACPC,EAAQF,EAAW,IAAIQ,UAAUC,OAAO,YACxCP,EAAQF,EAAW,IAAIQ,UAAUC,OAAO,cACvC,KAAFjB,KAEF,EAAFA,IAnBCA,EAAE,EAAGA,EAAEF,EAAWG,OAAQD,IAAM,EAAhCA,IA6CZ,OACI,sBAAKoB,UAAU,YAAf,UACI,sBAAKA,UAAU,YAAf,UACI,wBAAQA,UAAU,MAAMC,QAASzB,EAAM0B,YAAvC,gCACA,wBAAQF,UAAU,MAAMC,QAASxB,EAAjC,yBACA,wBAAQuB,UAAU,MAAMC,QA3Bd,WAClB,IADyB,IAAD,WAChBrB,GACJS,YAAW,WACP,IAAMC,EAAUC,SAASC,uBAAuB,aAChDF,EAAQV,GAAGgB,UAAUC,OAAO,YAC5B,IAAIM,EAAYb,EAAQV,GAAGc,aACvBU,EAAYd,EAAQV,GAAGc,aACvBW,EAAUzB,EACdS,YAAW,WACP,IAAI,IAAIP,EAAEF,EAAE,EAAGE,EAAEN,EAAMS,IAAIJ,OAAQC,IAC5BQ,EAAQR,GAAGY,aAAeU,IACzBA,EAAYd,EAAQR,GAAGY,aACvBW,EAAUvB,GAGlBQ,EAAQV,GAAGkB,MAAMC,OAAjB,UAA6BK,EAA7B,MACAd,EAAQe,GAASP,MAAMC,OAAvB,UAAmCI,EAAnC,QACC,IAAFvB,KACF,GAAFA,IAjBCA,EAAE,EAAGA,EAAEJ,EAAMS,IAAIJ,OAAQD,IAAM,EAA/BA,IA0BA,4BACA,wBAAQoB,UAAU,MAAMC,QAASxB,EAAjC,wBACA,wBAAQuB,UAAU,MAAMC,QAASxB,EAAjC,2BAGJ,qBAAKuB,UAAU,kBAAkBM,GAAG,kBAApC,SACK9B,EAAMS,IAAIsB,KAAI,SAACC,EAAKC,GACjB,OACI,qBAAiBT,UAAU,YAAYF,MAAO,CAACC,OAAQS,EAAI,OAAjDC,YE3DnBC,MAzBf,WACE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAiBA,OAhBAC,qBAAU,WAEN,IADA,IAAI7B,EAAM,GACFL,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACrB,IAAM4B,EAAMO,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAC9ChC,EAAIF,KAAKyB,GAEbK,EAAU5B,KACX,IAUD,qBAAKe,UAAU,MAAf,SACE,cAAC,EAAD,CAAmBf,IAAK2B,EAAQV,YAVhB,WAEhB,IADF,IAAIjB,EAAM,GACAL,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACrB,IAAM4B,EAAMO,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAC9ChC,EAAIF,KAAKyB,GAEbK,EAAU5B,SCNDiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASuC,eAAe,SAM1BZ,K","file":"static/js/main.2014eb12.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as sortingAlgos from './SortingAlgos';\r\n\r\nimport '../Styles/SortingVisualizer.scss';\r\n\r\nfunction SortingVisualizer(props) {\r\n    \r\n\r\n    // eslint-disable-next-line\r\n    const testTraversal = () => {\r\n        const animations = sortingAlgos.test(props.arr);\r\n        for(let i=0; i<Object.keys(animations).length; i++) {\r\n            const comparison = animations[i];\r\n            setTimeout(() => {\r\n                const numBars = document.getElementsByClassName('num-block');\r\n                numBars[i].classList.add('selected');\r\n\r\n                setTimeout(() => {\r\n                    // numBars[[comparison[0]]].classList.toggle('selected');\r\n                    numBars[[comparison[1]]].classList.toggle('selected');\r\n                }, (i+1) * 10)\r\n            }, i*10)\r\n        }\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        const animations = sortingAlgos.bubbleSort(props.arr);\r\n        console.log(animations);\r\n        for(let i=0; i<animations.length; i++) {\r\n            const comparison = animations[i]\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                const height1 = arrBars[comparison[0]].offsetHeight;\r\n                const height2 = arrBars[comparison[1]].offsetHeight;\r\n\r\n                arrBars[comparison[0]].classList.toggle('selected');\r\n                arrBars[comparison[1]].classList.toggle('selected');\r\n\r\n                if(height1 > height2) {\r\n                    arrBars[comparison[1]].style.height = `${height1}px`;\r\n                    arrBars[comparison[0]].style.height = `${height2}px`;\r\n                }\r\n                setTimeout(() => {\r\n                    arrBars[comparison[0]].classList.toggle('selected');\r\n                    arrBars[comparison[1]].classList.toggle('selected');\r\n                }, i*0.001)\r\n                \r\n            }, i*5);\r\n        }\r\n    }\r\n\r\n    const selectionSort = () => {\r\n        for(let i=0; i<props.arr.length; i++) {\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                arrBars[i].classList.toggle('selected');\r\n                let tmpHeight = arrBars[i].offsetHeight;\r\n                let minHeight = arrBars[i].offsetHeight;\r\n                let swapPos = i; \r\n                setTimeout(() => {\r\n                    for(let j=i+1; j<props.arr.length; j++) {\r\n                        if(arrBars[j].offsetHeight < minHeight) {\r\n                            minHeight = arrBars[j].offsetHeight;\r\n                            swapPos = j; \r\n                        }\r\n                    }\r\n                    arrBars[i].style.height = `${minHeight}px`;\r\n                    arrBars[swapPos].style.height = `${tmpHeight}px`;\r\n                }, i*0.01)\r\n            }, i*10)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"sort-btns\">\r\n                <button className=\"btn\" onClick={props.generateArr}>Generate New Array</button>\r\n                <button className=\"btn\" onClick={bubbleSort}>Bubble Sort</button>\r\n                <button className=\"btn\" onClick={selectionSort}>Selection Sort</button>\r\n                <button className=\"btn\" onClick={bubbleSort}>Merge Sort</button>\r\n                <button className=\"btn\" onClick={bubbleSort}>Quick Sort</button>\r\n            </div>\r\n            \r\n            <div className=\"container-fluid\" id=\"array-container\">\r\n                {props.arr.map((num, index) => {\r\n                    return (\r\n                        <div key={index} className=\"num-block\" style={{height: num+\"px\"}}></div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingVisualizer;","export function test(array) {\r\n    const animations = {}\r\n    for(let i=0; i<array.length; i++) {\r\n        animations[i] = [];\r\n        for(let j=i+1; j<array.length; j++) {\r\n            animations[i].push(j)\r\n        }\r\n    }\r\n    return animations\r\n} \r\n\r\nexport function bubbleSort(array) {\r\n    const animations = []\r\n    for(let i=0; i<array.length; i++) {\r\n        for(let j=0; j<array.length-i-1; j++) {\r\n            animations.push([j, j+1])\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\nexport function selectionSort(array) {\r\n    const animations = [] \r\n    for(let i=0; i<array.length; i++) {\r\n        for(let j=i+1; j<array.length; j++) {\r\n            animations.push([i,j])\r\n        }\r\n    }\r\n    return animations\r\n}","import React, {useEffect, useState} from \"react\";\nimport SortingVisualizer from \"./Components/SortingVisualizer\";\nfunction App() {\n  const [numArr, setNumArr] = useState([])\n  useEffect(() => {\n      let arr = []\n      for(let i=0; i<300; i++) {\n          const num = Math.floor(Math.random() * 500) + 1\n          arr.push(num);\n      }\n      setNumArr(arr);\n  }, [])\n  const generateArr = () => {\n    let arr = []\n      for(let i=0; i<300; i++) {\n          const num = Math.floor(Math.random() * 500) + 1\n          arr.push(num);\n      }\n      setNumArr(arr);\n  }\n  return (\n    <div className=\"App\">\n      <SortingVisualizer arr={numArr} generateArr={generateArr}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}