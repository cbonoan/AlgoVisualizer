{"version":3,"sources":["Components/SortingVisualizer.js","Components/SortingAlgos.js","App.js","reportWebVitals.js","index.js"],"names":["SortingVisualizer","props","disableBtns","s","btns","document","getElementsByClassName","i","length","disabled","setTimeout","bubbleSort","animations","array","j","push","sortingAlgos","arr","console","log","comparison","arrBars","height1","offsetHeight","height2","classList","toggle","style","height","className","type","onClick","generateArr","numBars","remove","tmpHeight","minHeight","swapPos","id","map","num","index","App","useState","numArr","setNumArr","useEffect","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b465648.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as sortingAlgos from './SortingAlgos';\r\n\r\nimport '../Styles/SortingVisualizer.scss';\r\n\r\nfunction SortingVisualizer(props) {\r\n    const resetArr = () => {\r\n        props.generateArr();\r\n        const numBars = document.getElementsByClassName('num-block');\r\n        for(let i=0; i<numBars.length; i++) {\r\n            numBars[i].classList.remove('selected');\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    const testTraversal = () => {\r\n        const animations = sortingAlgos.test(props.arr);\r\n        for(let i=0; i<Object.keys(animations).length; i++) {\r\n            const comparison = animations[i];\r\n            setTimeout(() => {\r\n                const numBars = document.getElementsByClassName('num-block');\r\n                numBars[i].classList.add('selected');\r\n\r\n                setTimeout(() => {\r\n                    // numBars[[comparison[0]]].classList.toggle('selected');\r\n                    numBars[[comparison[1]]].classList.toggle('selected');\r\n                }, (i+1) * 10)\r\n            }, i*10)\r\n        }\r\n    }\r\n\r\n    const disableBtns = (s) => {\r\n        const btns = document.getElementsByClassName('btn')\r\n        for(let i=0; i<btns.length; i++) {\r\n            btns[i].disabled = true;\r\n        }\r\n        setTimeout(() => {\r\n            for(let i=0; i<btns.length; i++) {\r\n                btns[i].disabled = false;\r\n            }\r\n        }, s)\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        disableBtns(8200);\r\n        const animations = sortingAlgos.bubbleSort(props.arr);\r\n        console.log(animations);\r\n        for(let i=0; i<animations.length; i++) {\r\n            const comparison = animations[i]\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                const height1 = arrBars[comparison[0]].offsetHeight;\r\n                const height2 = arrBars[comparison[1]].offsetHeight;\r\n\r\n                arrBars[comparison[0]].classList.toggle('selected');\r\n                arrBars[comparison[1]].classList.toggle('selected');\r\n\r\n                if(height1 > height2) {\r\n                    arrBars[comparison[1]].style.height = `${height1}px`;\r\n                    arrBars[comparison[0]].style.height = `${height2}px`;\r\n                }\r\n                // setTimeout(() => {\r\n                //     arrBars[comparison[0]].classList.toggle('selected');\r\n                //     arrBars[comparison[1]].classList.toggle('selected');\r\n                // }, i*1000)\r\n            }, i*0.1);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    const selectionSort = () => {\r\n        disableBtns(3000);\r\n        for(let i=0; i<props.arr.length; i++) {\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                arrBars[i].classList.toggle('selected');\r\n                let tmpHeight = arrBars[i].offsetHeight;\r\n                let minHeight = arrBars[i].offsetHeight;\r\n                let swapPos = i; \r\n                setTimeout(() => {\r\n                    for(let j=i+1; j<props.arr.length; j++) {\r\n                        if(arrBars[j].offsetHeight < minHeight) {\r\n                            minHeight = arrBars[j].offsetHeight;\r\n                            swapPos = j; \r\n                        }\r\n                    }\r\n                    arrBars[i].style.height = `${minHeight}px`;\r\n                    arrBars[swapPos].style.height = `${tmpHeight}px`;\r\n                }, i*0.01)\r\n            }, i*10)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"sort-btns\">\r\n                <button type=\"button\" className=\"btn\" onClick={resetArr}>Generate New Array</button>\r\n                <button type=\"button\" className=\"btn\" onClick={bubbleSort}>Bubble Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={selectionSort}>Selection Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={bubbleSort}>Merge Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={bubbleSort}>Quick Sort</button>\r\n            </div>\r\n            \r\n            <div className=\"container-fluid\" id=\"array-container\">\r\n                {props.arr.map((num, index) => {\r\n                    return (\r\n                        <div key={index} className=\"num-block\" style={{height: num+\"px\"}}></div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingVisualizer;","export function test(array) {\r\n    const animations = {}\r\n    for(let i=0; i<array.length; i++) {\r\n        animations[i] = [];\r\n        for(let j=i+1; j<array.length; j++) {\r\n            animations[i].push(j)\r\n        }\r\n    }\r\n    return animations\r\n} \r\n\r\nexport function bubbleSort(array) {\r\n    const animations = []\r\n    for(let i=0; i<array.length; i++) {\r\n        for(let j=0; j<array.length-i-1; j++) {\r\n            animations.push([j, j+1])\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\nexport function selectionSort(array) {\r\n    const animations = [] \r\n    for(let i=0; i<array.length; i++) {\r\n        for(let j=i+1; j<array.length; j++) {\r\n            animations.push([i,j])\r\n        }\r\n    }\r\n    return animations\r\n}","import React, {useEffect, useState} from \"react\";\nimport SortingVisualizer from \"./Components/SortingVisualizer\";\nfunction App() {\n  const [numArr, setNumArr] = useState([])\n  useEffect(() => {\n      let arr = []\n      for(let i=0; i<300; i++) {\n          const num = Math.floor(Math.random() * 500) + 1\n          arr.push(num);\n      }\n      setNumArr(arr);\n  }, [])\n  const generateArr = () => {\n    let arr = []\n      for(let i=0; i<300; i++) {\n          const num = Math.floor(Math.random() * 500) + 1\n          arr.push(num);\n      }\n      setNumArr(arr);\n  }\n  return (\n    <div className=\"App\">\n      <SortingVisualizer arr={numArr} generateArr={generateArr}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}