{"version":3,"sources":["Components/SortingAlgos.js","Components/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnims","arr","animations","auxArr","slice","console","log","mergeSort","length","array","l","r","anims","mid","Math","floor","i","j","k","push","merge","SortingVisualizer","props","disableBtns","btns","document","getElementsByClassName","disabled","enableBtns","bubbleSort","sortingAlgos","comparison","setTimeout","arrBars","height1","offsetHeight","height2","classList","toggle","style","height","className","type","onClick","generateArr","numBars","remove","barOne","barTwo","color","backgroundColor","newHeight","tmpHeight","minHeight","swapPos","id","map","num","index","App","useState","numArr","setNumArr","useEffect","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb25b10f.chunk.js","sourcesContent":["export function test(array) {\r\n    const anims = {}\r\n    for(let i=0; i<array.length; i++) {\r\n        anims[i] = [];\r\n        for(let j=i+1; j<array.length; j++) {\r\n            anims[i].push(j)\r\n        }\r\n    }\r\n    return anims\r\n} \r\n\r\nexport function bubbleSort(array) {\r\n    const anims = []\r\n    for(let i=0; i<array.length; i++) {\r\n        for(let j=0; j<array.length-i-1; j++) {\r\n            anims.push([j, j+1])\r\n        }\r\n    }\r\n    return anims\r\n}\r\n\r\nexport function getMergeSortAnims(arr) {\r\n    const animations = [];\r\n    const auxArr = arr.slice(); \r\n    console.log(arr)\r\n    mergeSort(arr, 0, arr.length-1, auxArr, animations);\r\n    console.log(arr)\r\n    return animations\r\n}\r\n\r\nfunction mergeSort(array, l, r, auxArr, anims) {\r\n    if(l === r) {\r\n        return;\r\n    }\r\n\r\n    const mid = Math.floor((l+r)/2);\r\n\r\n    mergeSort(auxArr, l, mid, array, anims);\r\n    mergeSort(auxArr, mid+1,r, array, anims);\r\n    merge(array, l, mid, r, auxArr, anims)\r\n}\r\n\r\nfunction merge(array, l, mid, r, auxArr, anims) {\r\n    let i = l; \r\n    let j = mid+1;\r\n    let k = l; \r\n\r\n\r\n    while(i <= mid && j <= r) {\r\n        anims.push([i,j]);\r\n        anims.push([i,j]);\r\n        if(auxArr[i] < auxArr[j]) {\r\n            anims.push([k, auxArr[i]]);\r\n            array[k] = auxArr[i];\r\n            i++;\r\n        } else {\r\n            anims.push([k, auxArr[j]]);\r\n            array[k] = auxArr[j];\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n\r\n    while(i <= mid) {\r\n        anims.push([i,i]);\r\n        anims.push([i,i]);\r\n        anims.push([k, auxArr[i]])\r\n        array[k] = auxArr[i];\r\n        k++;\r\n        i++;\r\n    }\r\n\r\n    while(j <= r) {\r\n        anims.push([j,j]);\r\n        anims.push([j,j]);\r\n        anims.push([k, auxArr[j]]);\r\n        array[k] = auxArr[j];\r\n        j++;\r\n        k++;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport * as sortingAlgos from './SortingAlgos';\r\n\r\nimport '../Styles/SortingVisualizer.scss';\r\n\r\nconst SELECTED_COLOR = \"#3498DB\";\r\nconst NOT_SELECTED = \"#E74C3C\";\r\n\r\nfunction SortingVisualizer(props) {\r\n    const resetArr = () => {\r\n        props.generateArr();\r\n        const numBars = document.getElementsByClassName('num-block');\r\n        for(let i=0; i<numBars.length; i++) {\r\n            numBars[i].classList.remove('selected');\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    const testTraversal = () => {\r\n        const animations = sortingAlgos.test(props.arr);\r\n        for(let i=0; i<Object.keys(animations).length; i++) {\r\n            const comparison = animations[i];\r\n            setTimeout(() => {\r\n                const numBars = document.getElementsByClassName('num-block');\r\n                numBars[i].classList.add('selected');\r\n\r\n                setTimeout(() => {\r\n                    // numBars[[comparison[0]]].classList.toggle('selected');\r\n                    numBars[[comparison[1]]].classList.toggle('selected');\r\n                }, (i+1) * 10)\r\n            }, i*10)\r\n        }\r\n    }\r\n\r\n    const disableBtns = () => {\r\n        const btns = document.getElementsByClassName('btn')\r\n        for(let i=0; i<btns.length; i++) {\r\n            btns[i].disabled = true;\r\n        }\r\n    }\r\n    const enableBtns = () => {\r\n        const btns = document.getElementsByClassName('btn')\r\n        for(let i=0; i<btns.length; i++) {\r\n            btns[i].disabled = false;\r\n        }\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        disableBtns();\r\n        const animations = sortingAlgos.bubbleSort(props.arr);\r\n        let i = 0;\r\n        for(i=0; i<animations.length; i++) {\r\n            const comparison = animations[i]\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                const height1 = arrBars[comparison[0]].offsetHeight;\r\n                const height2 = arrBars[comparison[1]].offsetHeight;\r\n\r\n                arrBars[comparison[0]].classList.toggle('selected');\r\n                arrBars[comparison[1]].classList.toggle('selected');\r\n\r\n                if(height1 > height2) {\r\n                    arrBars[comparison[1]].style.height = `${height1}px`;\r\n                    arrBars[comparison[0]].style.height = `${height2}px`;\r\n                }\r\n            }, 0);\r\n        }\r\n        setTimeout(() => {\r\n            enableBtns();\r\n        }, i*0.01);\r\n    }\r\n\r\n    const selectionSort = () => {\r\n        disableBtns();\r\n        let j = 0;\r\n        for(let i=0; i<props.arr.length; i++) {\r\n            setTimeout(() => {\r\n                const arrBars = document.getElementsByClassName('num-block');\r\n                arrBars[i].classList.toggle('selected');\r\n                let tmpHeight = arrBars[i].offsetHeight;\r\n                let minHeight = arrBars[i].offsetHeight;\r\n                let swapPos = i; \r\n                for(let j=i+1; j<props.arr.length; j++) {\r\n                    if(arrBars[j].offsetHeight < minHeight) {\r\n                        minHeight = arrBars[j].offsetHeight;\r\n                        swapPos = j; \r\n                    }\r\n                }\r\n                arrBars[i].style.height = `${minHeight}px`;\r\n                arrBars[swapPos].style.height = `${tmpHeight}px`;\r\n            }, i*10)\r\n            j++;\r\n        }\r\n        setTimeout(() => {\r\n            enableBtns();\r\n        }, j*10);\r\n    }\r\n\r\n    const mergeSort = () => {\r\n        disableBtns();\r\n        // console.log(sortingAlgos.getMergeSortAnims(props.arr));\r\n        const anims = sortingAlgos.getMergeSortAnims(props.arr);\r\n        console.log(anims)\r\n        let i = 0;\r\n        for(i=0; i < anims.length; i++) {\r\n            const arrBars = document.getElementsByClassName('num-block');\r\n            const swap = i % 3 !== 2;\r\n            if(swap) {\r\n                const [barOne, barTwo] = anims[i];\r\n                const color = i % 3 === 0 ? NOT_SELECTED : SELECTED_COLOR;\r\n                setTimeout(() => {\r\n                    arrBars[barOne].style.backgroundColor = color;\r\n                    arrBars[barTwo].style.backgroundColor = color;\r\n                }, i*10)\r\n            } else {\r\n                const [barOne, newHeight] = anims[i];\r\n                setTimeout(() => {\r\n                    arrBars[barOne].style.height = `${newHeight}px`;\r\n                }, i*10);\r\n            }\r\n            \r\n        }\r\n        setTimeout(() => {\r\n            enableBtns();\r\n        }, i*10)\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"sort-btns\">\r\n                <button type=\"button\" className=\"btn\" onClick={resetArr}>Generate New Array</button>\r\n                <button type=\"button\" className=\"btn\" onClick={mergeSort}>Merge Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={bubbleSort}>Quick Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={selectionSort}>Selection Sort</button>\r\n                <button type=\"button\" className=\"btn\" onClick={bubbleSort}>Bubble Sort</button>\r\n            </div>\r\n            \r\n            <div className=\"container-fluid\" id=\"array-container\">\r\n                {props.arr.map((num, index) => {\r\n                    return (\r\n                        <div key={index} className=\"num-block\" style={{height: num+\"px\"}}></div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortingVisualizer;","import React, {useEffect, useState} from \"react\";\nimport SortingVisualizer from \"./Components/SortingVisualizer\";\n\nconst NUM_ARR_LENGTH = 300;\nfunction App() {\n  const [numArr, setNumArr] = useState([])\n  useEffect(() => {\n      generateArr();\n  }, [])\n\n  const generateArr = () => {\n    let arr = []\n    for(let i=0; i<NUM_ARR_LENGTH; i++) {\n        const num = Math.floor(Math.random() * 500) + 5\n        arr.push(num);\n    }\n    setNumArr(arr);\n  }\n  return (\n    <div className=\"App\">\n      <SortingVisualizer arr={numArr} generateArr={generateArr}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}